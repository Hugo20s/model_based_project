set_inf <- FALSE
#--------initialize variables
n <- nrow(data); p <- ncol(data)
if (type_init == "kmeans"){
parameters <- init_kmeans(data, K)
}
if ((type_init == "random") || (type_init == "small"))  {
parameters <- init_random(data, K)
}
#Loop
i <- 2
log_likelihood <- numeric(0)
log_likelihood[1] <- -Inf
while( (i > 0) || (i > 1000))  {
tk <- etape_E(data, K, parameters)
parameters <- etape_M(data, K, tk)
pk <- parameters$pk
moyenne <- parameters$moyenne
variance <- parameters$variance
LL <- sum(log(apply(sapply(lapply(1:K,
function(k) pk[k] * emdbook::dmvnorm(data, moyenne[k,],
variance[,,k])), cbind), 1, sum)))
log_likelihood[i] <- LL
if (LL < log_likelihood[i-1]){
set_inf <- TRUE
print("------ debug KO")
print("tk")
print(tk)
print("sum tk")
print(colSums(tk))
print("pk")
print(pk)
print("moyenne")
print(moyenne)
print("variance")
print(variance)
}
if (abs(log_likelihood[i] - log_likelihood[i-1]) < epsilon){
y_pred <- apply(tk, 1, which.max)
if (set_inf){
print("___________________________________________________________KO")
plot(log_likelihood)
}
return(list(log_likelihood = log_likelihood[-1], y_pred = y_pred))
}
if ((type_init == "small") && (i == 5)) {
return( clustering(data, K, epsilon, "", parameters ) )
}
i <- i + 1
}
}
K <- 3
split <- sample(1:150, 50)
y <- iris[-split, 5]
data <- iris[-split, -5]
epsilon <- 10^-6
data <- as.matrix(data)
res <- clustering(data, K, epsilon, "small")
table(res$y_pred, y)
fun_variance_all <- function(data, tk, nk, K, N, f, moyenne){
variance <- array(0, c(f, f, K))
for(k in 1:K) {
x_moyenne <- sweep(data, 2, moyenne[k, ], FUN = '-', check.margin=FALSE)
ex <- tk[, k]  * x_moyenne
trans_x_moyenne <- t(ex) %*% x_moyenne
variance[,,k] <- trans_x_moyenne/ nk[k]
}
}
etape_M <- function(data, K, tk){
N <- nrow(data)
f <- ncol(data)
nk <- colSums(tk)
pk <- nk/N
moyenne  <- fun_moyenne_vec(data, tk,nk,K, N,  f)
variance  <- fun_variance_pkg(data, tk, nk, K, N, f, moyenne)
variance2 <- fun_variance_all(data, tk, nk, K, N, f, moyenne)
print(variance)
print(variance2)
return (list(pk=pk, moyenne=moyenne, variance=variance))
}
clustering <- function(data, K, epsilon, type_init = "kmeans", parameters = 0){
set_inf <- FALSE
#--------initialize variables
n <- nrow(data); p <- ncol(data)
if (type_init == "kmeans"){
parameters <- init_kmeans(data, K)
}
if ((type_init == "random") || (type_init == "small"))  {
parameters <- init_random(data, K)
}
#Loop
i <- 2
log_likelihood <- numeric(0)
log_likelihood[1] <- -Inf
while( (i > 0) || (i > 1000))  {
tk <- etape_E(data, K, parameters)
parameters <- etape_M(data, K, tk)
return()
pk <- parameters$pk
moyenne <- parameters$moyenne
variance <- parameters$variance
LL <- sum(log(apply(sapply(lapply(1:K,
function(k) pk[k] * emdbook::dmvnorm(data, moyenne[k,],
variance[,,k])), cbind), 1, sum)))
log_likelihood[i] <- LL
if (LL < log_likelihood[i-1]){
set_inf <- TRUE
print("------ debug KO")
print("tk")
print(tk)
print("sum tk")
print(colSums(tk))
print("pk")
print(pk)
print("moyenne")
print(moyenne)
print("variance")
print(variance)
}
if (abs(log_likelihood[i] - log_likelihood[i-1]) < epsilon){
y_pred <- apply(tk, 1, which.max)
if (set_inf){
print("___________________________________________________________KO")
plot(log_likelihood)
}
return(list(log_likelihood = log_likelihood[-1], y_pred = y_pred))
}
if ((type_init == "small") && (i == 5)) {
return( clustering(data, K, epsilon, "", parameters ) )
}
i <- i + 1
}
}
K <- 3
split <- sample(1:150, 50)
y <- iris[-split, 5]
data <- iris[-split, -5]
epsilon <- 10^-6
data <- as.matrix(data)
res <- clustering(data, K, epsilon, "small")
fun_variance_all <- function(data, tk, nk, K, N, f, moyenne){
variance <- array(0, c(f, f, K))
for(k in 1:K) {
x_moyenne <- sweep(data, 2, moyenne[k, ], FUN = '-', check.margin=FALSE)
ex <- tk[, k]  * x_moyenne
trans_x_moyenne <- t(ex) %*% x_moyenne
variance[,,k] <- trans_x_moyenne/ nk[k]
}
return(variance)
}
res <- clustering(data, K, epsilon, "small")
etape_M <- function(data, K, tk){
N <- nrow(data)
f <- ncol(data)
nk <- colSums(tk)
pk <- nk/N
moyenne  <- fun_moyenne_vec(data, tk,nk,K, N,  f)
variance<- fun_variance_all(data, tk, nk, K, N, f, moyenne)
return (list(pk=pk, moyenne=moyenne, variance=variance))
}
clustering <- function(data, K, epsilon, type_init = "kmeans", parameters = 0){
set_inf <- FALSE
#--------initialize variables
n <- nrow(data); p <- ncol(data)
if (type_init == "kmeans"){
parameters <- init_kmeans(data, K)
}
if ((type_init == "random") || (type_init == "small"))  {
parameters <- init_random(data, K)
}
#Loop
i <- 2
log_likelihood <- numeric(0)
log_likelihood[1] <- -Inf
while( (i > 0) || (i > 1000))  {
tk <- etape_E(data, K, parameters)
parameters <- etape_M(data, K, tk)
return()
pk <- parameters$pk
moyenne <- parameters$moyenne
variance <- parameters$variance
LL <- sum(log(apply(sapply(lapply(1:K,
function(k) pk[k] * emdbook::dmvnorm(data, moyenne[k,],
variance[,,k])), cbind), 1, sum)))
log_likelihood[i] <- LL
if (LL < log_likelihood[i-1]){
set_inf <- TRUE
print("------ debug KO")
print("tk")
print(tk)
print("sum tk")
print(colSums(tk))
print("pk")
print(pk)
print("moyenne")
print(moyenne)
print("variance")
print(variance)
}
if (abs(log_likelihood[i] - log_likelihood[i-1]) < epsilon){
y_pred <- apply(tk, 1, which.max)
if (set_inf){
print("___________________________________________________________KO")
plot(log_likelihood)
}
return(list(log_likelihood = log_likelihood[-1], y_pred = y_pred))
}
if ((type_init == "small") && (i == 5)) {
return( clustering(data, K, epsilon, "", parameters ) )
}
i <- i + 1
}
}
K <- 3
split <- sample(1:150, 50)
y <- iris[-split, 5]
data <- iris[-split, -5]
epsilon <- 10^-6
data <- as.matrix(data)
res <- clustering(data, K, epsilon, "small")
table(res$y_pred, y)
res <- clustering(data, K, epsilon, "small")
table(res$y_pred, y)
clustering <- function(data, K, epsilon, type_init = "kmeans", parameters = 0){
set_inf <- FALSE
#--------initialize variables
n <- nrow(data); p <- ncol(data)
if (type_init == "kmeans"){
parameters <- init_kmeans(data, K)
}
if ((type_init == "random") || (type_init == "small"))  {
parameters <- init_random(data, K)
}
#Loop
i <- 2
log_likelihood <- numeric(0)
log_likelihood[1] <- -Inf
while( (i > 0) || (i > 1000))  {
tk <- etape_E(data, K, parameters)
parameters <- etape_M(data, K, tk)
pk <- parameters$pk
moyenne <- parameters$moyenne
variance <- parameters$variance
LL <- sum(log(apply(sapply(lapply(1:K,
function(k) pk[k] * emdbook::dmvnorm(data, moyenne[k,],
variance[,,k])), cbind), 1, sum)))
log_likelihood[i] <- LL
if (LL < log_likelihood[i-1]){
set_inf <- TRUE
print("------ debug KO")
print("tk")
print(tk)
print("sum tk")
print(colSums(tk))
print("pk")
print(pk)
print("moyenne")
print(moyenne)
print("variance")
print(variance)
}
if (abs(log_likelihood[i] - log_likelihood[i-1]) < epsilon){
y_pred <- apply(tk, 1, which.max)
if (set_inf){
print("___________________________________________________________KO")
plot(log_likelihood)
}
return(list(log_likelihood = log_likelihood[-1], y_pred = y_pred))
}
if ((type_init == "small") && (i == 5)) {
return( clustering(data, K, epsilon, "", parameters ) )
}
i <- i + 1
}
}
K <- 3
split <- sample(1:150, 50)
y <- iris[-split, 5]
data <- iris[-split, -5]
epsilon <- 10^-6
data <- as.matrix(data)
res <- clustering(data, K, epsilon, "small")
table(res$y_pred, y)
plot(res$log_likelihood)
plot(res$y_pred)
clustering <- function(data, K, epsilon, type_init = "kmeans", parameters = 0){
set_inf <- FALSE
#--------initialize variables
n <- nrow(data); p <- ncol(data)
if (type_init == "kmeans"){
parameters <- init_kmeans(data, K)
}
if ((type_init == "random") || (type_init == "small"))  {
parameters <- init_random(data, K)
}
#Loop
i <- 2
log_likelihood <- numeric(0)
log_likelihood[1] <- -Inf
while( (i > 0) || (i > 100))  {
tk <- etape_E(data, K, parameters)
parameters <- etape_M(data, K, tk)
pk <- parameters$pk
moyenne <- parameters$moyenne
variance <- parameters$variance
LL <- sum(log(apply(sapply(lapply(1:K,
function(k) pk[k] * emdbook::dmvnorm(data, moyenne[k,],
variance[,,k])), cbind), 1, sum)))
log_likelihood[i] <- LL
if (LL < log_likelihood[i-1]){
set_inf <- TRUE
print("------ debug KO")
print("tk")
print(tk)
print("sum tk")
print(colSums(tk))
print("pk")
print(pk)
print("moyenne")
print(moyenne)
print("variance")
print(variance)
}
if (abs(log_likelihood[i] - log_likelihood[i-1]) < epsilon){
y_pred <- apply(tk, 1, which.max)
if (set_inf){
print("___________________________________________________________KO")
plot(log_likelihood)
}
return(list(log_likelihood = log_likelihood[-1], y_pred = y_pred))
}
if ((type_init == "small") && (i == 5)) {
return( clustering(data, K, epsilon, "", parameters ) )
}
i <- i + 1
}
}
for (i in 1:100){
res <- clustering(data, K, epsilon, "small")
if (typeof(res) == "list"){
print(res$log_likelihood[length(res$log_likelihood)])
}
print("-----")
}
mysum <- function(x) {
sum(x[is.finite(x)])
}
init_random <- function(data, K){
f <- ncol(data)
N <- nrow(data)
pk <- runif(K,3/10,7/10)
pk <- pk / sum(pk)
moyenne <- matrix(0, ncol=ncol(data), nrow = K)
for (k in 1:K) {
for (cf in 1:f){
rand_1 <- runif(1, min(data[,cf]), max(data[,cf]))
moyenne[k,cf] <- rand_1
}
}
variance <- array(0, c(f,f,K))
for(k in 1:K) {
x_moyenne <- sweep(data, 2, moyenne[k, ], FUN = '-', check.margin=FALSE)
trans_x_moyenne <- crossprod(x_moyenne)
variance[,,k] <- trans_x_moyenne/ N
}
return (list(pk=pk, moyenne=moyenne, variance=variance))
}
init_kmeans <- function (data, K) {
km.res <- kmeans(data, K)
pk <- rep(1/K, K)
moyenne <- as.matrix(km.res$centers)
variance <- array(0, dim=c(ncol(data),ncol(data),K))
for (i in seq(K)){
variance[,,i] <- cov(data[which(as.matrix(km.res$cluster) == i),])
}
return (list(pk=pk, moyenne=moyenne, variance=variance))
}
fun_variance_pkg <- function(data, tk, nk, K, N, f, moyenne){
variance <- array(0, c(f, f, K))
for(k in 1:K) {
variance[,,k] = cov.wt(data, wt = tk[,k] , cor = TRUE, method = "ML")$cov
}
return(variance)
}
fun_variance_all <- function(data, tk, nk, K, N, f, moyenne){
variance <- array(0, c(f, f, K))
for(k in 1:K) {
x_moyenne <- sweep(data, 2, moyenne[k, ], FUN = '-', check.margin=FALSE)
ex <- tk[, k]  * x_moyenne
trans_x_moyenne <- t(ex) %*% x_moyenne
variance[,,k] <- trans_x_moyenne/ nk[k]
}
return(variance)
}
fun_moyenne_vec <- function(data, tk, nk, K, N,  f){
moyenne <- matrix(0, K, f)
for(k in 1:K) {
moyenne[k,] <- (1/sum(tk[,k])) * colSums(apply(data,2, function(x) x*tk[, k])  )
}
return(moyenne)
}
etape_E <- function(data, K, parameters){
pk <- parameters$pk
moyenne <- parameters$moyenne
variance <- parameters$variance
tk <- matrix(0,  nrow(data), K)
for (k in 1:K){
tk[, k] <- pk[k]* mvtnorm::dmvnorm(data, moyenne[k,], variance[,,k])
}
tk <- tk/apply(tk, 1, sum)
for (k in 1:K){
if (sum(tk[,k]) == 0){
print(sum(tk[,k]))
print(variance)
print(moyenne)
}
}
return (tk)
}
etape_M <- function(data, K, tk){
N <- nrow(data)
f <- ncol(data)
nk <- colSums(tk)
pk <- nk/N
moyenne  <- fun_moyenne_vec(data, tk,nk,K, N,  f)
variance<- fun_variance_all(data, tk, nk, K, N, f, moyenne)
return (list(pk=pk, moyenne=moyenne, variance=variance))
}
clustering <- function(data, K, epsilon, type_init = "kmeans", parameters = 0){
set_inf <- FALSE
#--------initialize variables
n <- nrow(data); p <- ncol(data)
if (type_init == "kmeans"){
parameters <- init_kmeans(data, K)
}
if ((type_init == "random") || (type_init == "small"))  {
parameters <- init_random(data, K)
}
#Loop
i <- 2
log_likelihood <- numeric(0)
log_likelihood[1] <- -Inf
while( (i > 0) || (i > 100))  {
tk <- etape_E(data, K, parameters)
parameters <- etape_M(data, K, tk)
pk <- parameters$pk
moyenne <- parameters$moyenne
variance <- parameters$variance
LL <- sum(log(apply(sapply(lapply(1:K,
function(k) pk[k] * mvtnorm::dmvnorm(data, moyenne[k,],
variance[,,k])), cbind), 1, sum)))
log_likelihood[i] <- LL
if (LL < log_likelihood[i-1]){
set_inf <- TRUE
print("------ debug KO")
print("tk")
print(tk)
print("sum tk")
print(colSums(tk))
print("pk")
print(pk)
print("moyenne")
print(moyenne)
print("variance")
print(variance)
}
if (abs(log_likelihood[i] - log_likelihood[i-1]) < epsilon){
y_pred <- apply(tk, 1, which.max)
if (set_inf){
print("___________________________________________________________KO")
plot(log_likelihood)
}
return(list(log_likelihood = log_likelihood[-1], y_pred = y_pred))
}
if ((type_init == "small") && (i == 5)) {
return( clustering(data, K, epsilon, "", parameters ) )
}
i <- i + 1
}
}
K <- 3
split <- sample(1:150, 50)
y <- iris[-split, 5]
data <- iris[-split, -5]
epsilon <- 10^-6
data <- as.matrix(data)
res <- clustering(data, K, epsilon, "small")
table(res$y_pred, y)
plot(res$log_likelihood)
plot(res$y_pred)
for (i in 1:100){
res <- clustering(data, K, epsilon, "small")
if (typeof(res) == "list"){
print(res$log_likelihood[length(res$log_likelihood)])
}
print("-----")
}
for (i in 1:100){
res <- clustering(data, K, epsilon, "random")
if (typeof(res) == "list"){
print(res$log_likelihood[length(res$log_likelihood)])
}
print("-----")
}
a <- rbind(c(1,2,3),
c(1,2,3))
cov(a)
a <- rbind(c(1,2,3),
c(1.1,2.1,3.1))
cov(a)
d <- c(2,2,2, 2)
d + 0.1
